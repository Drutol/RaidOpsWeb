<% if not authorized?(@guild.id) %>
<script type="text/javascript">
    window.location.href= "<%= "/guilds/#{params[:guild_id]}" %>" 
</script>
<% else %>
<div class="row"></div>
	<div class="col-md-2" align="center"></div>
	<div class="col-md-8" align="center">
	<div class="panel panel-primary" align="center">  
	  <div class="panel-heading">Keys</div>
	  <div class="panel-body">
	  	<table class="table table-hover">
	  	<thead><tr><td><b>Key</b></td><td><b>Cooldown</b></td><td><b>Uses</b></td><td><b>Creator</b></td><td><b>Remove</b></td></tr></thead>
  	  	<% for key in @guild.api_keys do %>
  	  		<tr>
		  		<td><%= key.key %></td>
		  		<% cd = (Time.now.to_i - key.cooldown) if key.cooldown %>
		  		<td <%="countdown-start=#{cd*-1}" if cd and cd < 0%>>Ready</td>
		  		<% cd = nil %>
		  		<td><%= (key.triggered if key.triggered) or 0 %></td>
		  		<td><%= (key.str_creator if key.str_creator) or "Unknown" %></td>
		  		<td><%= link_to content_tag(:p , '' , :class => "glyphicon glyphicon-remove")+" Remove", api_keys_rem_guild_path(@guild,:key_id => key.id), class: ' btn lg btn-danger' ,:style => "display:inline" , method: :post %></div>
		  		</td>
	  		</tr>
	  	<% end -%>
		</table>

	  </div>
	  <%= link_to content_tag(:p , '' , :class => "glyphicon glyphicon-asterisk")+" New", api_keys_new_guild_path(@guild,:email => current_user.email), class: ' btn lg btn-primary' ,:style => "display:inline" , method: :post %>
	  <%= link_to content_tag(:p , '' , :class => "glyphicon glyphicon-export")+" What is it for?", index_uploader_path, class: ' btn lg btn-warning' ,:style => "display:inline" %>
	  <%= link_to content_tag(:p , '' , :class => "glyphicon glyphicon-arrow-left")+" Back", guild_path(@guild), class: ' btn lg btn-primary' ,:style => "display:inline" %>
	  <br><br>
	</div>
	<div class="col-md-2" align="center"></div> 
</div>

<script type="text/javascript">
	function startTimer(duration, display) 
	{
	    var timer = duration, minutes, seconds;
	    var id = setInterval(function () 
	    {
	        minutes = parseInt(timer / 60, 10);
	        seconds = parseInt(timer % 60, 10);

	        minutes = minutes < 10 ? "0" + minutes : minutes;
	        seconds = seconds < 10 ? "0" + seconds : seconds;

	        display.textContent = minutes + ":" + seconds;

	        if (--timer < 0) 
	        {
	            display.textContent = "Ready";
	            clearInterval(id);
	        }
	    }, 1000);
	}

function getAllElementsWithAttribute(attribute)
{
  var matchingElements = [];
  var allElements = document.getElementsByTagName('*');
  for (var i = 0, n = allElements.length; i < n; i++)
  {
    if (allElements[i].getAttribute(attribute) !== null)
    {
      matchingElements.push(allElements[i]);
    }
  }
  return matchingElements;
}

$(document).ready(function(){
	var timers = getAllElementsWithAttribute("countdown-start")
	for (var i = 0; i < timers.length; i++) {
		startTimer(timers[i].getAttribute("countdown-start"),timers[i]);
	};
});
</script>

<% end %>